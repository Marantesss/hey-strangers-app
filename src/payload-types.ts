/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    admins: AdminAuthOperations;
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    admins: Admin;
    users: User;
    sports: Sport;
    fieldTypes: FieldType;
    fieldFloorings: FieldFlooring;
    fieldAmenities: FieldAmenity;
    fields: Field;
    games: Game;
    registrations: Registration;
    invites: Invite;
    cities: City;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    users: {
      registrations: 'registrations';
    };
    fields: {
      games: 'games';
    };
    registrations: {
      game: 'games';
    };
  };
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    admins: AdminsSelect<false> | AdminsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    sports: SportsSelect<false> | SportsSelect<true>;
    fieldTypes: FieldTypesSelect<false> | FieldTypesSelect<true>;
    fieldFloorings: FieldFlooringsSelect<false> | FieldFlooringsSelect<true>;
    fieldAmenities: FieldAmenitiesSelect<false> | FieldAmenitiesSelect<true>;
    fields: FieldsSelect<false> | FieldsSelect<true>;
    games: GamesSelect<false> | GamesSelect<true>;
    registrations: RegistrationsSelect<false> | RegistrationsSelect<true>;
    invites: InvitesSelect<false> | InvitesSelect<true>;
    cities: CitiesSelect<false> | CitiesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    home: Home;
    footer: Footer;
    quiz: Quiz;
    pages: Page;
  };
  globalsSelect: {
    home: HomeSelect<false> | HomeSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    quiz: QuizSelect<false> | QuizSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
  };
  locale: 'en' | 'pt';
  user:
    | (Admin & {
        collection: 'admins';
      })
    | (User & {
        collection: 'users';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface AdminAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins".
 */
export interface Admin {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  email?: string | null;
  stripeCustomerId?: string | null;
  profilePicture?: (string | null) | Media;
  otp?: {
    code?: string | null;
    expiration?: string | null;
  };
  phoneNumber: string;
  isVerified?: boolean | null;
  name?: string | null;
  city?: (string | null) | City;
  quizAnswers:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  registrations?: {
    docs?: (string | Registration)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities".
 */
export interface City {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registrations".
 */
export interface Registration {
  id: string;
  stripePaymentIntentId: string;
  /**
   * If true, the user was the one who registered for the game and made the reservation
   */
  isMainRegistration?: boolean | null;
  /**
   * If true, then the paying user was a guest and was invited by another user
   */
  isGuest?: boolean | null;
  game?: {
    docs?: (string | Game)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  user: string | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "games".
 */
export interface Game {
  id: string;
  /**
   * The game's name will never be shown to the user, it is only used to identify the game on the back office
   */
  name: string;
  description?: string | null;
  startsAt: string;
  endsAt: string;
  bookingFee: number;
  price: number;
  maxPlayers: number;
  sport: string | Sport;
  field: string | Field;
  registrations?: (string | Registration)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sports".
 */
export interface Sport {
  id: string;
  name: string;
  emoji: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fields".
 */
export interface Field {
  id: string;
  name: string;
  address: string;
  city: string | City;
  type: string | FieldType;
  flooring: string | FieldFlooring;
  sport: string | Sport;
  amenities?: (string | FieldAmenity)[] | null;
  games?: {
    docs?: (string | Game)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fieldTypes".
 */
export interface FieldType {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fieldFloorings".
 */
export interface FieldFlooring {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fieldAmenities".
 */
export interface FieldAmenity {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "invites".
 */
export interface Invite {
  id: string;
  user: string | User;
  game: string | Game;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'admins';
        value: string | Admin;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'sports';
        value: string | Sport;
      } | null)
    | ({
        relationTo: 'fieldTypes';
        value: string | FieldType;
      } | null)
    | ({
        relationTo: 'fieldFloorings';
        value: string | FieldFlooring;
      } | null)
    | ({
        relationTo: 'fieldAmenities';
        value: string | FieldAmenity;
      } | null)
    | ({
        relationTo: 'fields';
        value: string | Field;
      } | null)
    | ({
        relationTo: 'games';
        value: string | Game;
      } | null)
    | ({
        relationTo: 'registrations';
        value: string | Registration;
      } | null)
    | ({
        relationTo: 'invites';
        value: string | Invite;
      } | null)
    | ({
        relationTo: 'cities';
        value: string | City;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'admins';
        value: string | Admin;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'admins';
        value: string | Admin;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins_select".
 */
export interface AdminsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  email?: T;
  stripeCustomerId?: T;
  profilePicture?: T;
  otp?:
    | T
    | {
        code?: T;
        expiration?: T;
      };
  phoneNumber?: T;
  isVerified?: T;
  name?: T;
  city?: T;
  quizAnswers?: T;
  registrations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sports_select".
 */
export interface SportsSelect<T extends boolean = true> {
  name?: T;
  emoji?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fieldTypes_select".
 */
export interface FieldTypesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fieldFloorings_select".
 */
export interface FieldFlooringsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fieldAmenities_select".
 */
export interface FieldAmenitiesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fields_select".
 */
export interface FieldsSelect<T extends boolean = true> {
  name?: T;
  address?: T;
  city?: T;
  type?: T;
  flooring?: T;
  sport?: T;
  amenities?: T;
  games?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "games_select".
 */
export interface GamesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  startsAt?: T;
  endsAt?: T;
  bookingFee?: T;
  price?: T;
  maxPlayers?: T;
  sport?: T;
  field?: T;
  registrations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registrations_select".
 */
export interface RegistrationsSelect<T extends boolean = true> {
  stripePaymentIntentId?: T;
  isMainRegistration?: T;
  isGuest?: T;
  game?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "invites_select".
 */
export interface InvitesSelect<T extends boolean = true> {
  user?: T;
  game?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities_select".
 */
export interface CitiesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home".
 */
export interface Home {
  id: string;
  hero: {
    title: string;
    subtitle: string;
    description: string;
    buttonLabel: string;
    partners: {
      name: string;
      logo: string | Media;
      id?: string | null;
    }[];
  };
  nextGames: {
    title: string;
    games: {
      emoji: string;
      sport: string;
      location: string;
      description: string;
      image: string | Media;
      time: string;
      id?: string | null;
    }[];
  };
  howItWorks: {
    title: string;
    subtitle: string;
    buttonLabel: string;
    steps: {
      icon: string | Media;
      title: string;
      description: string;
      id?: string | null;
    }[];
  };
  stats: {
    title: string;
    statistics: {
      value: number;
      label: string;
      description: string;
      id?: string | null;
    }[];
    image: string | Media;
  };
  testimonials: {
    title: string;
    reviews: {
      quote: string;
      author: string;
      image: string | Media;
      id?: string | null;
    }[];
  };
  cta: {
    title: string;
    subtitle: string;
    buttonLabel: string;
    sports: {
      name: string;
      image: string | Media;
      selected: boolean;
      id?: string | null;
    }[];
  };
  strangers: {
    title: string;
    strangers: {
      name: string;
      age: number;
      bio: string;
      sport: string;
      image: string | Media;
      id?: string | null;
    }[];
  };
  whenAndWhere: {
    title: string;
    subtitle: string;
    buttonLabel: string;
    image: string | Media;
    features: {
      emoji: string;
      title: string;
      description: string;
      id?: string | null;
    }[];
  };
  numbers: {
    title: string;
    numbers: {
      value: number;
      label: string;
      id?: string | null;
    }[];
  };
  faq: {
    title: string;
    questions: {
      question: string;
      answer: string;
      id?: string | null;
    }[];
  };
  cta2: {
    title: string;
    buttonLabel: string;
  };
  seo?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  links: {
    label: string;
    url: string;
    id?: string | null;
  }[];
  socialLinks: {
    platform: 'facebook' | 'youtube' | 'linkedin' | 'instagram';
    url: string;
    id?: string | null;
  }[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz".
 */
export interface Quiz {
  id: string;
  /**
   * These are the sports that will be cycled through in the quiz
   */
  sports: {
    name: string;
    id?: string | null;
  }[];
  /**
   * These are the questions that will be asked during the quiz
   */
  questions: {
    /**
     * This key identifies the question and must be unique for each one
     */
    key: string;
    /**
     * The title of the question
     */
    title: string;
    /**
     * Shows a short note below the options
     */
    description?: string | null;
    options: {
      /**
       * If disabled, the option will not be shown as disabled
       */
      enabled?: boolean | null;
      /**
       * The text that will be shown to the user
       */
      label: string;
      /**
       * This is the value that will be returned if the option is selected. For each question, this value must be unique.
       */
      value: string;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  /**
   * These are the results that will be shown to the user after they have answered the quiz
   */
  dummyGameResults?:
    | {
        /**
         * The game's name will never be shown to the user, it is only used to identify the game on the back office
         */
        name: string;
        description: string;
        startsAt: string;
        endsAt: string;
        price: number;
        maxPlayers: number;
        sport: string | Sport;
        field: string | Field;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  contactUs: {
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  safety: {
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  communityGuidelines: {
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  termsOfService: {
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  privacyPolicy: {
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home_select".
 */
export interface HomeSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        description?: T;
        buttonLabel?: T;
        partners?:
          | T
          | {
              name?: T;
              logo?: T;
              id?: T;
            };
      };
  nextGames?:
    | T
    | {
        title?: T;
        games?:
          | T
          | {
              emoji?: T;
              sport?: T;
              location?: T;
              description?: T;
              image?: T;
              time?: T;
              id?: T;
            };
      };
  howItWorks?:
    | T
    | {
        title?: T;
        subtitle?: T;
        buttonLabel?: T;
        steps?:
          | T
          | {
              icon?: T;
              title?: T;
              description?: T;
              id?: T;
            };
      };
  stats?:
    | T
    | {
        title?: T;
        statistics?:
          | T
          | {
              value?: T;
              label?: T;
              description?: T;
              id?: T;
            };
        image?: T;
      };
  testimonials?:
    | T
    | {
        title?: T;
        reviews?:
          | T
          | {
              quote?: T;
              author?: T;
              image?: T;
              id?: T;
            };
      };
  cta?:
    | T
    | {
        title?: T;
        subtitle?: T;
        buttonLabel?: T;
        sports?:
          | T
          | {
              name?: T;
              image?: T;
              selected?: T;
              id?: T;
            };
      };
  strangers?:
    | T
    | {
        title?: T;
        strangers?:
          | T
          | {
              name?: T;
              age?: T;
              bio?: T;
              sport?: T;
              image?: T;
              id?: T;
            };
      };
  whenAndWhere?:
    | T
    | {
        title?: T;
        subtitle?: T;
        buttonLabel?: T;
        image?: T;
        features?:
          | T
          | {
              emoji?: T;
              title?: T;
              description?: T;
              id?: T;
            };
      };
  numbers?:
    | T
    | {
        title?: T;
        numbers?:
          | T
          | {
              value?: T;
              label?: T;
              id?: T;
            };
      };
  faq?:
    | T
    | {
        title?: T;
        questions?:
          | T
          | {
              question?: T;
              answer?: T;
              id?: T;
            };
      };
  cta2?:
    | T
    | {
        title?: T;
        buttonLabel?: T;
      };
  seo?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  links?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz_select".
 */
export interface QuizSelect<T extends boolean = true> {
  sports?:
    | T
    | {
        name?: T;
        id?: T;
      };
  questions?:
    | T
    | {
        key?: T;
        title?: T;
        description?: T;
        options?:
          | T
          | {
              enabled?: T;
              label?: T;
              value?: T;
              id?: T;
            };
        id?: T;
      };
  dummyGameResults?:
    | T
    | {
        name?: T;
        description?: T;
        startsAt?: T;
        endsAt?: T;
        price?: T;
        maxPlayers?: T;
        sport?: T;
        field?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  contactUs?:
    | T
    | {
        content?: T;
        title?: T;
        image?: T;
        description?: T;
      };
  safety?:
    | T
    | {
        content?: T;
        title?: T;
        image?: T;
        description?: T;
      };
  communityGuidelines?:
    | T
    | {
        content?: T;
        title?: T;
        image?: T;
        description?: T;
      };
  termsOfService?:
    | T
    | {
        content?: T;
        title?: T;
        image?: T;
        description?: T;
      };
  privacyPolicy?:
    | T
    | {
        content?: T;
        title?: T;
        image?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}